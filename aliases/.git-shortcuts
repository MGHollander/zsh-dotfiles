#!/usr/bin/env bash

# Git shortcuts

# This file cannot be named .git, because most editors will hide it then.
# TODO Consider to move the Git aliases from .gitconfig to this file to have everything at one place.
# TODO Remove aliases that are already part of the Oh My Zsh plugin.

alias gb='git branch'
alias gba='git branch --all'
alias gbr='git branch --remote'
alias gco='git checkout'
alias gcd='git checkout develop && glc'
alias gcm='git checkout master && glc'
alias gcs='git checkout release/staging && glc'
alias gdt='git describe --tags $(git rev-list --tags --max-count=1)'
alias gd='git diff'
alias gf='git fetch'
alias gl='git pull'
alias glc='git pull origin "$(git_current_branch)"'
alias gld='git pull origin develop'
alias gp='git push'
alias gpc='git push origin "$(git_current_branch)"'
alias gr='git remote -v'
alias gst='git status'
alias gspc='git stash push -m "$(git_current_branch)"'

alias gfco='git_fetch_checkout'
git_fetch_checkout() {
  gf && gco "$1" && glc
}

alias gtl='git_tag_list'
git_tag_list() {
  git tag --sort=-version:refname | head -n "${1:-5}"
}

# Clean up local branches that do not exist on remote anymore (https://stackoverflow.com/a/17029936)
alias gclb='git_clean_local_branches'

git_clean_local_branches() {
  local force=false

  # Parse arguments
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -f|--force)
        force=true
        shift
        ;;
      *)
        shift
        ;;
    esac
  done

  # Fetch and prune remote branches
  git fetch --prune

  # Get list of branches to delete
  local branches_to_delete
  branches_to_delete=$(git branch -r | awk "{print \$1}" | grep -E -v -f /dev/fd/0 <(git branch -vv | grep origin) | awk "{print \$1}")

  if [[ -z "$branches_to_delete" ]]; then
    echo "No branches to delete"
    return 0
  fi

  # Delete branches based on force flag
  if [[ "$force" = true ]]; then
    echo "$branches_to_delete" | xargs git branch -D
  else
    echo "$branches_to_delete" | xargs git branch -d
  fi
}

# Helper function to create a new branch
_create_branch() {
  local base_branch=""
  local prefix=""

  # Show help if no arguments or help flag
  if [[ $# -eq 0 ]] || [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
    echo "Usage: command [options] <branch-description>"
    echo
    echo "Create a new branch from a specified base branch."
    echo
    echo "Options:"
    echo "  -h, --help              Show this help message"
    echo "  -p, --prefix <prefix>   Use <prefix> for the branch name"
    echo "  -b, --base <ref>        Use <ref> as base branch"
    echo
    echo "Examples:"
    echo "  command --base master --prefix hotfix fix critical bug   # Creates hotfix/fix-critical-bug from master"
    echo "  command --prefix feature new thing                       # Creates feature/new-thing from the current branch"
    echo "  command several changes                                  # Creates several-changes from the current branch"
    return 0
  fi

  local args=()

  # Parse arguments
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -p|--prefix)
        prefix="$2"
        shift 2
        ;;
      -b|--base)
        base_branch="$2"
        shift 2
        ;;
      *)
        args+=("$1")
        shift
        ;;
    esac
  done

  if [[ -z "$base_branch" ]]; then
    base_branch="$(git_current_branch)"
  fi

  # Check if we have a branch description
  if [[ ${#args[@]} -eq 0 ]]; then
    echo "Error: No branch description provided"
    echo "Try 'command --help' for usage information"
    return 1
  fi

  # Join remaining arguments with hyphens
  local branch_suffix
  branch_suffix="$(printf "%s" "${args[*]}" | tr ' ' '-')"
  if [[ -n "$prefix" ]]; then
    local branch_name="$prefix/$branch_suffix"
  else
    local branch_name="$branch_suffix"
  fi

  git checkout -b "$branch_name" "origin/$base_branch" && git push -u origin "$branch_name"
}

cb() {
  _create_branch --base "develop" "$@"
}

hf() {
  _create_branch --base "master" --prefix "hotfix" "$@"
}

bf() {
  _create_branch --base "develop" --prefix "bugfix" "$@"
}

fe() {
  _create_branch --base "develop" --prefix "feature" "$@"
}

