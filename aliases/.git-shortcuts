#!/usr/bin/env bash

# Git shortcuts

# This file cannot be named .git, because most editors will hide it then.
# TODO Consider to move the Git aliases from .gitconfig to this file to have everything at one place.
# TODO Remove aliases that are already part of the Oh My Zsh plugin.

alias gb='git branch'
alias gba='git branch --all'
alias gbr='git branch --remote'
alias gco='git checkout'
alias gcd='git checkout develop && glc'
alias gcm='git checkout master && glc'
alias gcs='git checkout release/staging && glc'
alias gdt='git describe --tags $(git rev-list --tags --max-count=1)'
alias gd='git diff'
alias gf='git fetch'
alias gl='git pull'
alias glc='git pull origin "$(git_current_branch)"'
alias gld='git pull origin develop'
alias gp='git push'
alias gpc='git push origin "$(git_current_branch)"'
alias gr='git remote -v'
alias gst='git status'

alias gfco='git-fetch-checkout'
git-fetch-checkout() {
  gf && gco "$1" && glc
}

alias gtl='git-tag-list'
git-tag-list() {
  git tag --sort=-version:refname | head -n "${1:-5}"
}

# Clean up local branches that do not exist on remote anymore (https://stackoverflow.com/a/17029936)
# TODO make a function from this command that return's branches that will be
#   deleted and ask for confirmation before deleting.
#   Add a flag to delete the branches without confirmation.
#   Add a flag to delete the branches that are not fully merged.
alias gclb='git-clean-local-branches'

git-clean-local-branches() {
  git fetch --prune
  git branch -r | awk "{print \$1}" | egrep -v -f /dev/fd/0 <(git branch -vv | grep origin) | awk "{print \$1}" | xargs git branch -d;
}

# Helper function to create a new branch
_create_branch() {
  local prefix="$1"
  local default_base="$2"
  shift 2

  # Show help if no arguments or help flag
  if [[ $# -eq 0 ]] || [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
    echo "Usage: ${prefix} [options] <branch-description>"
    echo
    echo "Create a new ${prefix} branch from a specified base branch."
    echo
    echo "Options:"
    echo "  -h, --help         Show this help message"
    echo "  -b, --base <ref>   Use <ref> as base branch instead of ${default_base}"
    echo
    echo "Examples:"
    echo "  ${prefix} fix critical bug     # Creates ${prefix}/fix-critical-bug from ${default_base}"
    echo "  ${prefix} -b main new thing    # Creates ${prefix}/new-thing from main"
    return 0
  fi

  local base_branch="$default_base"
  local args=()

  # Parse arguments
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -b|--base)
        base_branch="$2"
        shift 2
        ;;
      *)
        args+=("$1")
        shift
        ;;
    esac
  done

  # Check if we have a branch description
  if [[ ${#args[@]} -eq 0 ]]; then
    echo "Error: No branch description provided"
    echo "Try '${prefix} --help' for usage information"
    return 1
  fi

  # Join remaining arguments with hyphens
  local branch_suffix="$(printf "%s" "${args[*]}" | tr ' ' '-')"
  local branch_name="$prefix/$branch_suffix"

  git checkout -b "$branch_name" "origin/$base_branch" && git push -u origin "$branch_name"
}

# Create a hotfix branch (default base: master)
hf() {
  _create_branch "hotfix" "master" "$@"
}

# Create a bugfix branch (default base: develop)
bf() {
  _create_branch "bugfix" "develop" "$@"
}

# Create a feature branch (default base: develop)
fe() {
  _create_branch "feature" "develop" "$@"
}
