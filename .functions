#!/usr/bin/env bash

# TODO add these functions to the readme

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Use Gitâ€™s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# TODO Add to docs
# TODO Make variables configurable or something
# TODO Use these functions to the project creation script in stead of valet function?
DB_USER="root"
DB_PASS="root"

function mdbc() {
    DB_NAME=$1

    if [ -z $DB_NAME ];then
        echo "No database name given"
        return
    fi

    mysql -u$DB_USER -p$DB_PASS -e "
        CREATE DATABASE IF NOT EXISTS ${DB_NAME};
        CREATE USER IF NOT EXISTS $DB_USER@localhost IDENTIFIED BY '$DB_PASS';
        GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO '$DB_USER'@'localhost';
        FLUSH PRIVILEGES;
        "
    code=$?

    if [ 0 -ne $code ];then
        echo "Couldn't create database";
        exit $code;
    fi
}

# TODO Add to docs
# TODO make variables configurable or something
# TODO Add confirmation if to make sure an existing DB should be removed
function mdbd() {
    DB_NAME=$1

    if [ -z $DB_NAME ];then
        echo "No database name given"
        return
    fi

    mysql -u$DB_USER -p$DB_PASS -e "
        DROP DATABASE ${DB_NAME};
        "
    code=$?

    if [ 0 -ne $code ];then
        echo "Couldn't drop database";
        exit $code;
    fi
}
